server:
  port: 6001
  servlet:
    context-path: /api/gateway

eureka:
  client:
    # 是否向注册中心注册自己，缺省：true
    register-with-eureka: true
    # 是否从Eureka获取注册信息，缺省：true
    fetch-registry: true
    # Eureka服务器的地址，类型为HashMap，缺省的Key为 defaultZone；缺省的Value为 http://localhost:8761/eureka
    # 如果服务注册中心为高可用集群时，多个注册中心地址以逗号分隔。
    service-url:
      #      defaultZone: http://eureka1001:1001/eureka/,http://eureka1002:1002/eureka/,http://eureka1003:1003/eureka/
      defaultZone: http://eureka1001:1001/eureka/
  instance:
    prefer-ip-address: true
    ip-address: 127.0.0.1
    instance-id: ${spring.application.name}:${server.port}
    lease-renewal-interval-in-seconds: 10

spring:
  main:
    web-application-type: reactive
  application:
    name: spring-cloud-gateway
  cloud:
    gateway:
      # 是否开启网关
      enabled: true
      discovery:
        locator:
          # 默认为false，设为true开启通过微服务创建路由的功能，即可以通过微服务名访问服务
          enabled: true
          lower-case-service-id: true
      routes:
        # 路由的ID，没有固定规则但要求唯一，建议配合服务名
        - id: spring-cloud-department-provider
          # uri 的协议为 lb，表示启用 Gateway 的负载均衡功能。 lb://serviceName 是 spring cloud gateway 在微服务中自动为我们创建的负载均衡uri
          uri: lb://spring-cloud-department-provider
          # 路径相匹配的进行路由
          predicates:
            - Path=/api/provider/**

        - id: spring-cloud-user-consumer
          uri: lb://spring-cloud-user-consumer
          predicates:
            - Path=/api/consumer/**

ribbon:
  #最大重试次数，当Eureka中可以找到服务，但是服务连不上时将会重试，如果eureka中找不到服务则直接走断路器
  MaxAutoRetries: 2
  #切换实例的重试次数
  MaxAutoRetriesNextServer: 3
  #对所有操作请求都进行重试，如果是get则可以，如果是post，put等操作没有实现幂等的情况下是很危险的,所以设置为false
  OkToRetryOnAllOperations: false
  #请求连接的超时时间
  ConnectTimeout: 200000
  #请求处理的超时时间
  ReadTimeout: 200000
